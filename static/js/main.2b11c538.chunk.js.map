{"version":3,"sources":["actions/action.js","actions/actionTypes.js","reducers/getReducer.js","reducers/index.js","store.js","styles/style.js","styles/StyledComponent.jsx","components/NavBar.jsx","components/WorkOrderManager.jsx","components/WorkOrderList.jsx","components/SideBarView.jsx","components/UnassignedWorkOrderList.jsx","components/AvailableWorkOrderListPopup.jsx","App.js","serviceWorker.js","index.js"],"names":["setPostWorkOrderList","jobname","workorderName","assignedTo","selectedDate","dispatch","type","workOrderList","require","job","postWorkOrderList","inetialState","employeeList","Employess","combineReducers","get","state","action","updatedPostWorkOrderList","map","item","forEach","workorder","workorders","name","Employee","Date","middleWare","thunk","store","createStore","rootReducer","applyMiddleware","paperStyles","css","search","searchIcon","grow","inputRoot","inputInput","rootContainer","fullContainerHeight","mainContainerHeight","sideBarFixWidth","sideBarStyles","sideBarIcons","StyledGraphicEqIcon","styled","GraphicEqIcon","StyledDashboardIcon","DashboardIcon","StyledSettingsIcon","SettingsIcon","StyledFeedbackIcon","FeedbackIcon","StyledHomeIcon","HomeIcon","StyledMenuBookIcon","MenuBookIcon","StyledReceiptIcon","ReceiptIcon","StyledTableCell","TableCell","StyledTableContainer","TableContainer","StyledAppBar","AppBar","NavBar","position","Toolbar","Typography","variant","noWrap","InputBase","placeholder","inputProps","React","Component","WorkOrderManager","props","Grid","container","xs","styleObject","WorkOrderList","dateList","connect","useState","isModalOpen","setIsModalOpen","availableWorkorder","setAvailableWorkorder","setSelectedDate","setAssignedTo","getWorkOrderForSelectedDate","date","getDate","filter","JobName","push","Paper","component","Table","aria-label","TableHead","TableRow","align","index","key","toDateString","TableBody","row","Name","onClick","employeeName","onTableCellClick","workOrderForEmployee","UnassignedWorkOrderList","AvailableWorkOrderListPopup","handleClose","SideBarView","Dialog","onClose","aria-labelledby","open","id","dividers","length","Button","color","gutterBottom","ListItem","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2b11c538.chunk.js","sourcesContent":["import * as action from \"./actionTypes\";\r\n\r\nexport const setPostWorkOrderList = (jobname,workorderName,assignedTo,selectedDate) => (\r\n  dispatch\r\n) => {\r\n  dispatch({\r\n    type: action.SET_POST_WORKORDER_LIST,\r\n    workorderName,\r\n    jobname,\r\n    assignedTo,\r\n    selectedDate\r\n  });\r\n};\r\n\r\n\r\n","export const SET_POST_WORKORDER_LIST = \"SET_POST_WORKORDER_LIST\";","import { SET_POST_WORKORDER_LIST } from \"../actions\";\r\n\r\nconst workOrderList = require(\"../sampleJson/getWorkOrderList.json\").job;\r\nconst postWorkOrderList = require(\"../sampleJson/postWorkOrderList.json\").job;\r\nconst employeeList = require(\"../sampleJson/getEmployeeList.json\").Employess;\r\n\r\nconst inetialState = {\r\n  employeeList: employeeList,\r\n  postWorkOrderList: postWorkOrderList,\r\n  workOrderList: workOrderList,\r\n};\r\n\r\nexport default function (state = inetialState, action) {\r\n  switch (action.type) {\r\n    case SET_POST_WORKORDER_LIST:\r\n      let updatedPostWorkOrderList = state.postWorkOrderList.map(\r\n        (item) => item\r\n      );\r\n      updatedPostWorkOrderList.forEach((workorder) => {\r\n        if (workorder.jobname === action.jobname) {\r\n          workorder.workorders.map((item) => {\r\n            if (item.name === action.workorderName) {\r\n              item.Employee = action.assignedTo;\r\n              item.Date = new Date(action.selectedDate);\r\n            }\r\n          });\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        postWorkOrderList: updatedPostWorkOrderList,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport getReducer from \"./getReducer\";\r\n\r\nexport default combineReducers({\r\n  get: getReducer\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst inetialState = {};\r\nconst middleWare = [thunk];\r\nconst store = createStore(\r\n  rootReducer,\r\n  inetialState,\r\n  applyMiddleware(...middleWare)\r\n);\r\n\r\nexport default store;\r\n","/** @jsx jsx */\r\nimport { css } from \"@emotion/core\";\r\n\r\nexport const paperStyles = css`\r\n  color: rgba(0, 0, 0, 0.54);\r\n  text-align: center;\r\n  overflow-y: auto;\r\n  max-height: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const search = css`\r\n  margin-left: 38px;\r\n  width: 40%;\r\n  position: relative;\r\n  margin-right: 16px;\r\n  border-radius: 4px;\r\n  background-color: rgba(255, 255, 255, 0.15);\r\n`;\r\n\r\nexport const searchIcon = css`\r\n  padding: 12px 16px;\r\n  height: 100%;\r\n  position: absolute;\r\n  pointerevents: none;\r\n  display: flex;\r\n  alignitems: center;\r\n  justifycontent: center;\r\n`;\r\n\r\nexport const grow = css`\r\n  && {\r\n    flex-grow: 1;\r\n    background-color: #0c2667;\r\n  }\r\n`;\r\n\r\nexport const inputRoot = css`\r\n  color: inherit;\r\n`;\r\n\r\nexport const inputInput = css`\r\n  ${inputRoot};\r\n  padding: 8px 8px 8px 0px;\r\n  transition: width 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n  padding-left: calc(1em + 32px);\r\n`;\r\n\r\nexport const rootContainer = css`\r\n  flex-grow: 1;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  overflow-y: hidden;\r\n`;\r\n\r\nexport const fullContainerHeight = css`\r\n  height: 100%;\r\n`;\r\n\r\nexport const mainContainerHeight = css`\r\n  height: 90%;\r\n`;\r\n\r\nexport const sideBarFixWidth = css`\r\n  width: 105px;\r\n`;\r\n\r\nexport const sideBarStyles = css`\r\n  background-color: #141419;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow-y: hidden;\r\n  color: #9d9ea3;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n`;\r\n\r\nexport const sideBarIcons = css`\r\n  && {\r\n    font-size: 2rem;\r\n    margin: 15px 0;\r\n  }\r\n`;\r\n\r\n","/** @jsx jsx */\r\nimport { sideBarIcons } from \"../styles\";\r\nimport styled from \"@emotion/styled\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport GraphicEqIcon from \"@material-ui/icons/GraphicEq\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport FeedbackIcon from \"@material-ui/icons/Feedback\";\r\nimport MenuBookIcon from \"@material-ui/icons/MenuBook\";\r\nimport ReceiptIcon from \"@material-ui/icons/Receipt\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\n\r\nexport const StyledGraphicEqIcon = styled(GraphicEqIcon)`\r\n  ${sideBarIcons}\r\n`;\r\n\r\nexport const StyledDashboardIcon = styled(DashboardIcon)`\r\n  ${sideBarIcons}\r\n`;\r\n\r\nexport const StyledSettingsIcon = styled(SettingsIcon)`\r\n  ${sideBarIcons}\r\n`;\r\n\r\nexport const StyledFeedbackIcon = styled(FeedbackIcon)`\r\n  ${sideBarIcons}\r\n`;\r\n\r\nexport const StyledHomeIcon = styled(HomeIcon)`\r\n  ${sideBarIcons}\r\n`;\r\n\r\nexport const StyledMenuBookIcon = styled(MenuBookIcon)`\r\n  ${sideBarIcons}\r\n`;\r\n\r\nexport const StyledReceiptIcon = styled(ReceiptIcon)`\r\n  ${sideBarIcons}\r\n`;\r\n\r\nexport const StyledTableCell = styled(TableCell)`\r\n  && {\r\n    border: 1px solid black;\r\n    height: 50px;\r\n    width: 14%;\r\n    font-weight:700\r\n  }\r\n`;\r\n\r\nexport const StyledTableContainer = styled(TableContainer)`\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n`;\r\n","/** @jsx jsx */\r\nimport { jsx } from \"@emotion/core\";\r\nimport styled from \"@emotion/styled\";\r\nimport React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport {\r\n  search,\r\n  searchIcon,\r\n  grow,\r\n  inputInput,\r\n} from \"../styles\";\r\n\r\nconst StyledAppBar = styled(AppBar)`\r\n  ${grow}\r\n`;\r\n\r\nexport class NavBar extends React.Component {\r\n  render() {\r\n    return (\r\n      <div css={grow}>\r\n        <StyledAppBar position=\"static\">\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" noWrap>\r\n              WakenCode WorkOrder\r\n            </Typography>\r\n            <div css={search}>\r\n              <div css={searchIcon}>\r\n                <SearchIcon />\r\n              </div>\r\n              <InputBase\r\n                placeholder=\"Search…\"\r\n                css={inputInput}\r\n                inputProps={{ \"aria-label\": \"search\" }}\r\n              />\r\n            </div>\r\n            <div css={grow} />\r\n          </Toolbar>\r\n        </StyledAppBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/** @jsx jsx */\r\nimport { jsx } from \"@emotion/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n  WorkOrderList,\r\n  NavBar,\r\n  SideBarView,\r\n} from \"./index\";\r\nimport {\r\n  fullContainerHeight,\r\n  rootContainer,\r\n  mainContainerHeight,\r\n  sideBarFixWidth,\r\n  sideBarStyles,\r\n} from \"../styles\";\r\n\r\nexport const WorkOrderManager = (props) => {\r\n  return (\r\n    <div css={rootContainer}>\r\n      <NavBar />\r\n      <Grid css={fullContainerHeight} container>\r\n        <Grid css={(fullContainerHeight, sideBarFixWidth)} item xs={1}>\r\n          <SideBarView styleObject={sideBarStyles} />\r\n        </Grid>\r\n        <Grid css={mainContainerHeight} item xs={11}>\r\n          <WorkOrderList />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\n","/** @jsx jsx */\r\nimport { jsx } from \"@emotion/core\";\r\nimport { useState } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { connect } from \"react-redux\";\r\nimport { paperStyles, StyledTableCell, StyledTableContainer } from \"../styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { setPostWorkOrderList } from \"../actions\";\r\nimport { UnassignedWorkOrderList, AvailableWorkOrderListPopup } from \"./index\";\r\n\r\nconst dateList = [\r\n  new Date(\"20-Apr-20\"),\r\n  new Date(\"21-Apr-20\"),\r\n  new Date(\"22-Apr-20\"),\r\n  new Date(\"23-Apr-20\"),\r\n  new Date(\"24-Apr-20\"),\r\n  new Date(\"25-Apr-20\"),\r\n];\r\n\r\nconst WorkOrderListUnwrapped = (props) => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [availableWorkorder, setAvailableWorkorder] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState(\"\");\r\n  const [assignedTo, setAssignedTo] = useState(\"\");\r\n\r\n  const onTableCellClick = (selectedDate, employeeName) => {\r\n    setAssignedTo(employeeName);\r\n    getWorkOrderForSelectedDate(selectedDate);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const onHandleClose = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const getWorkOrderForSelectedDate = (date) => {\r\n    let selectedDate = date.getDate();\r\n    let availableWorkorder = [];\r\n    props.postWorkOrderList.map((job) => {\r\n      job.workorders.filter((workorder) => {\r\n        if (selectedDate === new Date(workorder.Date).getDate()) {\r\n          workorder.JobName = job.jobname;\r\n          availableWorkorder.push(workorder);\r\n        }\r\n      });\r\n    });\r\n    setSelectedDate(date);\r\n    setAvailableWorkorder(availableWorkorder);\r\n  };\r\n\r\n  return (\r\n    <Paper css={paperStyles}>\r\n      <StyledTableContainer component={Paper}>\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell align=\"right\">{\"Employee Name\"}</StyledTableCell>\r\n              {dateList.map((date, index) => {\r\n                return (\r\n                  <StyledTableCell key={index} align=\"right\">\r\n                    {date.toDateString()}\r\n                  </StyledTableCell>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {props.employeeList.map((row) => (\r\n              <TableRow key={\"TableRowWithDetails\" + row.Name}>\r\n                <StyledTableCell key={row.Name} align=\"right\">\r\n                  {row.Name}\r\n                </StyledTableCell>\r\n                {dateList.map((date) => {\r\n                  return (\r\n                    <StyledTableCell\r\n                      key={date.getDate() + row.Name}\r\n                      onClick={() => {\r\n                        onTableCellClick(date, row.Name);\r\n                      }}\r\n                      align=\"right\"\r\n                    >\r\n                      {props.postWorkOrderList.map((workOrderForEmployee) => {\r\n                        return workOrderForEmployee.workorders.map(\r\n                          (workorder) => {\r\n                            if (\r\n                              workorder.Employee === row.Name &&\r\n                              date.getDate() ===\r\n                                new Date(workorder.Date).getDate()\r\n                            )\r\n                              return (\r\n                                <span\r\n                                  key={\"CellDetail\" + row.Name + workorder.Date}\r\n                                >\r\n                                  {workorder.name}\r\n                                  <br />\r\n                                </span>\r\n                              );\r\n                            else return <span>{\"\"}</span>;\r\n                          }\r\n                        );\r\n                      })}\r\n                    </StyledTableCell>\r\n                  );\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </StyledTableContainer>\r\n      <UnassignedWorkOrderList />\r\n      <AvailableWorkOrderListPopup\r\n        isModalOpen={isModalOpen}\r\n        handleClose={onHandleClose}\r\n        availableWorkorder={availableWorkorder}\r\n        selectedDate={selectedDate}\r\n        assignedTo={assignedTo}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    employeeList: state.get.employeeList,\r\n    postWorkOrderList: state.get.postWorkOrderList,\r\n    workOrderList: state.get.workOrderList,\r\n  };\r\n};\r\n\r\nexport const WorkOrderList = connect(mapStateToProps, { setPostWorkOrderList })(\r\n  WorkOrderListUnwrapped\r\n);\r\n","/** @jsx jsx */\r\nimport { jsx } from \"@emotion/core\";\r\nimport {\r\n  StyledReceiptIcon,\r\n  StyledGraphicEqIcon,\r\n  StyledHomeIcon,\r\n  StyledMenuBookIcon,\r\n  StyledDashboardIcon,\r\n  StyledSettingsIcon,\r\n  StyledFeedbackIcon,\r\n} from \"../styles\";\r\n\r\nexport const SideBarView = (props) => {\r\n  return (\r\n    <div css={props.styleObject}>\r\n      <StyledGraphicEqIcon />\r\n      <StyledHomeIcon />\r\n      <StyledMenuBookIcon />\r\n      <StyledDashboardIcon />\r\n      <StyledReceiptIcon />\r\n      <StyledSettingsIcon />\r\n      <StyledFeedbackIcon />\r\n    </div>\r\n  );\r\n};\r\n","/** @jsx jsx */\r\nimport { jsx } from \"@emotion/core\";\r\nimport styled from \"@emotion/styled\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { connect } from \"react-redux\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { StyledTableCell, StyledTableContainer } from \"../styles\";\r\n\r\nconst dateList = [\r\n  new Date(\"20-Apr-20\"),\r\n  new Date(\"21-Apr-20\"),\r\n  new Date(\"22-Apr-20\"),\r\n  new Date(\"23-Apr-20\"),\r\n  new Date(\"24-Apr-20\"),\r\n  new Date(\"25-Apr-20\"),\r\n];\r\n\r\nconst UnassignedWorkOrderListUnwrapped = (props) => {\r\n  return (\r\n    <StyledTableContainer component={Paper}>\r\n      <Table aria-label=\"simple table\">\r\n        <TableBody>\r\n          {props.workOrderList.map((job, index) => {\r\n            return (\r\n              <TableRow key={\"TableRow\" + job.jobname + index}>\r\n                <StyledTableCell key={job.jobname + index} align=\"right\">\r\n                  {job.jobname}\r\n                </StyledTableCell>\r\n                {dateList.map((date, index) => {\r\n                  return (\r\n                    <StyledTableCell key={date.getDate() + index} align=\"right\">\r\n                      {job.workorders.map((workorder) => {\r\n                        if (\r\n                          date.getDate() === new Date(workorder.Date).getDate()\r\n                        ) {\r\n                          return workorder.name;\r\n                        } else {\r\n                          return \"\";\r\n                        }\r\n                      })}\r\n                    </StyledTableCell>\r\n                  );\r\n                })}\r\n              </TableRow>\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </StyledTableContainer>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    workOrderList: state.get.workOrderList,\r\n  };\r\n};\r\n\r\nexport const UnassignedWorkOrderList = connect(\r\n  mapStateToProps,\r\n  null\r\n)(UnassignedWorkOrderListUnwrapped);\r\n","/** @jsx jsx */\r\nimport { jsx } from \"@emotion/core\";\r\nimport { connect } from \"react-redux\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { setPostWorkOrderList } from \"../actions\";\r\n\r\nexport const AvailableWorkOrderListPopupUnwrapped = (props) => {\r\n  return (\r\n    <Dialog\r\n      onClose={props.handleClose}\r\n      aria-labelledby=\"customized-dialog-title\"\r\n      open={props.isModalOpen}\r\n    >\r\n      <MuiDialogTitle id=\"customized-dialog-title\" onClose={props.handleClose}>\r\n        Available WorkOrders\r\n      </MuiDialogTitle>\r\n      <MuiDialogContent dividers>\r\n        {props.availableWorkorder.length === 0 ? (\r\n          <Button\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              props.handleClose();\r\n            }}\r\n            gutterBottom\r\n          >\r\n            {\"No workorder available for this date\"}\r\n          </Button>\r\n        ) : (\r\n          props.availableWorkorder.map((workorder) => {\r\n            return (\r\n              <ListItem>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    props.setPostWorkOrderList(\r\n                      workorder.JobName,\r\n                      workorder.name,\r\n                      props.assignedTo,\r\n                      props.selectedDate\r\n                    );\r\n                    props.handleClose();\r\n                  }}\r\n                  gutterBottom\r\n                >\r\n                  {workorder.name}\r\n                </Button>\r\n              </ListItem>\r\n            );\r\n          })\r\n        )}\r\n      </MuiDialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport const AvailableWorkOrderListPopup = connect(null, {\r\n  setPostWorkOrderList,\r\n})(AvailableWorkOrderListPopupUnwrapped);\r\n","/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport \"./App.css\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { rootContainer } from \"./styles\";\nimport { WorkOrderManager } from \"./components\";\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <div css={rootContainer}>\n        <WorkOrderManager />\n      </div>\n    </Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}